//ek ek check krskte 
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        while(headB){
            ListNode *temp=headA;
            while(temp){
                if(temp==headB) return headB;
                temp=temp->next;
            }
            headB=headB->next;
        }
        return NULL;
    }


class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int cnt1=0,cnt2=0;
        ListNode *temp1=headA,*temp2=headB;
        while(temp1 || temp2){
            if(temp1) {
                cnt1++;
                temp1=temp1->next;
            }
            if(temp2) {
                cnt2++;
                temp2=temp2->next;
            }
        }
        temp1=headA;temp2=headB;
        if(cnt1>cnt2){
            int move=cnt1-cnt2;
            while(move){
                temp1=temp1->next;
                move--;
            }
        }
        else{
            int move=cnt2-cnt1;
            while(move){
                temp2=temp2->next;
                move--;
            }
        }
        while(temp1){
            if(temp1==temp2){
                return temp1;
            }
            else {
                temp1=temp1->next;
                temp2=temp2->next;
            }
        }
        return NULL;
    }
};



//better we r 

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *temp1=headA,*temp2=headB;
        while(temp1 && temp2){
            temp1=temp1->next;
            temp2=temp2->next;
        }
        if(! temp1){
            temp1=headB;
            while(temp2){
                temp2=temp2->next;
                temp1=temp1->next;
            }
            temp2=headA;
        }
        else{
            temp2=headA;
            while(temp1){
                temp2=temp2->next;
                temp1=temp1->next;
            }
            temp1=headB;
        }
        
        while(temp1){
            if(temp1==temp2){
                return temp1;
            }
            else {
                temp1=temp1->next;
                temp2=temp2->next;
            }
        }
        return NULL;
    }
};