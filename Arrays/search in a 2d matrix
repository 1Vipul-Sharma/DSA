//brute just linearly traverse

bool searchMatrix(vector<vector<int>>& matrix, int target) {
    int m=matrix.size();   
    int n=matrix[0].size();
    for(int i=0;i<m;i++){
    for(int j=0;j<n;j++){
        if(matrix[i][j]==target) return true;
    }
    }
    return false;
}

//better utilizing sorted row 

bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();   
        int n=matrix[0].size();
        for(int i=0;i<m;i++){
            int ele=matrix[i][n-1];
            if(ele==target) return true;
            else if(ele>target){
                int l=0,h=n-1;
                while(l<=h){
                    int mid=(l+h)/2;
                    if(matrix[i][mid]==target) return true;
                    else if(matrix[i][mid]<target) l=mid+1;
                    else h=mid-1;
                }
                return false;
            }   
                   
        }
        return false;
}


//best using this 2d array as 1D as all row are sorted  as well as first ele of each row are greater than the last ele of orevious row


bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size(),n=matrix[0].size();
        int l=0,h=m*n-1;
        while(l<=h){
            int mid=l+(h-l)/2;
            int ele=matrix[mid/n][mid%n];
            if(ele==target) return true;
            else if(ele<target) l=mid+1;
            else h=mid-1;
        }
        return false;
    }