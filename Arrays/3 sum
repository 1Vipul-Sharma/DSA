//brute 

    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        set<vector<int>> set;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                for(int k=j+1;k<n;k++){
                    long long sum=nums[i];
                    sum+=nums[j];
                    sum+=nums[k];
                    if(sum==0){
                        vector<int> temp={nums[i],nums[j],nums[k]};
                        sort(temp.begin(),temp.end());
                        set.insert(temp);
                    }
                }
            }
        }
        vector<vector<int>> ans(set.begin(),set.end());
        return ans;
    }


    // better just fixed two loop and then for third use hashmap

        vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        set<vector<int>> st;
        for(int i=0;i<n;i++){
            set<int> sti;
            for(int j=i+1;j<n;j++){
                
                int rem= -(nums[i]+nums[j]);
                cout<<rem<<" ";
                if(sti.find(rem)!=sti.end()){
                  cout<<"in";
                    vector<int> arr={nums[i],nums[j],rem};
                    sort(arr.begin(),arr.end());
                    st.insert(arr);
                }   
                sti.insert(nums[j]); 
            }
        }
        vector<vector<int>> ans(st.begin(),st.end());
        return ans;
    }


    // /optimal

        vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        set<vector<int>> set;
        for(int i=0;i<n;i++){
            int l=i+1,h=n-1;
            while(l<h){
                long long sum=nums[i];
                sum+=nums[l];
                sum+=nums[h];
                if(sum==0) {
                    set.insert({nums[i],nums[l],nums[h]});
                    l++;h--;
                }
                else if(sum>0) h--;
                else l++;
            }
        }
        vector<vector<int>> ans(set.begin(),set.end());
        return ans;
    }