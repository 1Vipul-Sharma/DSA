//BRUTE
vector<vector<int>> fourSum(vector<int>& nums, int target) {
     int n=nums.size();
     set<vector<int>> s;
     for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            for(int k=j+1;k<n;k++){
                for(int l=k+1;l<n;l++) {
                    int a=nums[i],b=nums[j],c=nums[k],d=nums[l];
                    if((long long)a+b+c+d==target) {
                        vector<int> temp={a,b,c,d};
                        sort(temp.begin(),temp.end());
                        s.insert(temp);
                    }
                }
            }
        }
     }   
     vector<vector<int>> ans(s.begin(),s.end());
     return ans;
}

//better
vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n=nums.size();
        set<vector<int>> se;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                set<long long> s;
                for(int k=j+1;k<n;k++){
                    long long rem=target-((long long)nums[i]+nums[j]+nums[k]);
                    if(s.find(rem)!=s.end()){
                        vector<int> temp={nums[i],nums[j],nums[k],(int)rem};
                        sort(temp.begin(),temp.end());
                        se.insert(temp);
                    }
                    s.insert(nums[k]); 
                }
            }
        }
        vector<vector<int>> ans(se.begin(),se.end());
        return ans;
    }